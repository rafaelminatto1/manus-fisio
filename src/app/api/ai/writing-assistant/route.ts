import { NextRequest } from 'next/server'

export async function POST(req: NextRequest) {
  try {
    const { text, context, action } = await req.json()

    // Verificar autentica√ß√£o
    const authHeader = req.headers.get('authorization')
    if (!authHeader) {
      return new Response('Unauthorized', { status: 401 })
    }

    let result: any = {}

    switch (action) {
      case 'improve':
        result.improvedText = improveText(text, context)
        break
      case 'suggest':
        result.suggestions = generateSuggestions(text)
        break
      case 'grammar':
        result.corrections = checkGrammar(text)
        break
      default:
        return new Response('Invalid action', { status: 400 })
    }

    return Response.json(result)

  } catch (error) {
    console.error('Writing Assistant Error:', error)
    return new Response('Internal Server Error', { status: 500 })
  }
}

function improveText(text: string, context?: string): string {
  // Simula√ß√£o de melhoria de texto
  const improvements = [
    'Vers√£o melhorada e mais clara do seu texto:\n\n',
    text
      .replace(/\b(muito|bem|bastante)\b/g, '') // Remove adv√©rbios desnecess√°rios
      .replace(/\b(que|o qual|a qual)\b/g, '') // Simplifica pronomes relativos
      .replace(/\s+/g, ' ') // Remove espa√ßos extras
      .trim(),
    '\n\n‚ú® Melhorias aplicadas: linguagem mais concisa, terminologia t√©cnica adequada, estrutura otimizada.'
  ]
  
  return improvements.join('')
}

function generateSuggestions(text: string): string[] {
  // Simula√ß√£o de sugest√µes baseadas no contexto
  const suggestions = [
    'üìã Adicionar se√ß√£o de "Objetivos do Tratamento"',
    'üìä Incluir m√©tricas de progresso mensur√°veis',
    'üéØ Detalhar protocolo de exerc√≠cios espec√≠ficos',
    'üìÖ Estabelecer cronograma de reavalia√ß√µes',
    'üìù Documentar contraindica√ß√µes relevantes',
    'üîç Adicionar crit√©rios de alta do paciente'
  ]
  
  return suggestions.slice(0, Math.floor(Math.random() * 4) + 2)
}

function checkGrammar(text: string): Array<{issue: string, suggestion: string, position: number}> {
  // Simula√ß√£o de verifica√ß√£o gramatical
  const corrections = []
  
  // Verificar concord√¢ncia
  if (text.includes('dados est√°')) {
    corrections.push({
      issue: 'Concord√¢ncia incorreta',
      suggestion: 'Alterar "dados est√°" para "dados est√£o"',
      position: text.indexOf('dados est√°')
    })
  }
  
  // Verificar crase
  if (text.includes('a n√≠vel')) {
    corrections.push({
      issue: 'Uso incorreto de crase',
      suggestion: 'Alterar "a n√≠vel" para "em n√≠vel"',
      position: text.indexOf('a n√≠vel')
    })
  }
  
  // Verificar redund√¢ncias
  if (text.includes('reavaliar novamente')) {
    corrections.push({
      issue: 'Redund√¢ncia',
      suggestion: 'Remover "novamente" (reavaliar j√° indica repeti√ß√£o)',
      position: text.indexOf('reavaliar novamente')
    })
  }
  
  return corrections
} 
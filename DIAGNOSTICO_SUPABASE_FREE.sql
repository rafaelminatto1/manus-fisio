-- =====================================================
-- DIAGN√ìSTICO SUPABASE FREE - POL√çTICAS RLS
-- =====================================================

-- üîç VERIFICAR POL√çTICAS EXISTENTES
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- üîç VERIFICAR ESPEC√çFICAMENTE POL√çTICAS COM auth.uid()
SELECT 
  tablename,
  policyname,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE schemaname = 'public'
AND (
  qual LIKE '%auth.uid()%' 
  OR with_check LIKE '%auth.uid()%'
  OR qual LIKE '%(SELECT auth.uid())%'
  OR with_check LIKE '%(SELECT auth.uid())%'
)
ORDER BY tablename;

-- üîç VERIFICAR TABELAS QUE PRECISAM DE OTIMIZA√á√ÉO
SELECT 
  tablename,
  COUNT(*) as total_policies,
  COUNT(CASE WHEN qual LIKE '%auth.uid()%' THEN 1 END) as direct_auth_uid,
  COUNT(CASE WHEN qual LIKE '%(SELECT auth.uid())%' THEN 1 END) as optimized_auth_uid
FROM pg_policies 
WHERE schemaname = 'public'
AND tablename IN ('notifications', 'projects', 'notebooks', 'calendar_events')
GROUP BY tablename;

-- üîç VERIFICAR PERMISS√ïES ATUAIS DO USU√ÅRIO
SELECT 
  rolname,
  rolsuper,
  rolcreaterole,
  rolcreatedb,
  rolcanlogin
FROM pg_roles 
WHERE rolname = current_user;

-- üîç VERIFICAR SE CONSEGUE CRIAR/ALTERAR POL√çTICAS (TESTE)
-- (Este comando n√£o ser√° executado, apenas mostra se h√° permiss√£o)
-- DROP POLICY IF EXISTS "test_policy" ON public.notifications;

-- ‚úÖ VERIFICA√á√ÉO SIMPLIFICADA PARA DEBUG
SELECT 
  'Pol√≠ticas com view' as categoria,
  COUNT(*) as quantidade
FROM pg_policies 
WHERE schemaname = 'public'
AND policyname LIKE '%view%';

-- ‚úÖ VERIFICA√á√ÉO DE OTIMIZA√á√ÉO ESPEC√çFICA
SELECT 
  'Pol√≠ticas otimizadas' as categoria,
  COUNT(*) as quantidade
FROM pg_policies 
WHERE schemaname = 'public'
AND (qual LIKE '%(SELECT auth.uid())%' OR with_check LIKE '%(SELECT auth.uid())%'); 